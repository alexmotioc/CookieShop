// <auto-generated />
using System;
using CookieShop.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CookieShop.EntityFramework.Migrations
{
    [DbContext(typeof(CookieShopDbContext))]
    [Migration("20200516182937_cookierating")]
    partial class cookierating
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CookieShop.Domain.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountHolderId");

                    b.Property<double>("Balance");

                    b.HasKey("Id");

                    b.HasIndex("AccountHolderId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("CookieShop.Domain.Models.Cookie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId");

                    b.Property<string>("Name");

                    b.Property<string>("Price");

                    b.Property<string>("Sweeteners");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Cookies");
                });

            modelBuilder.Entity("CookieShop.Domain.Models.CookieRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId");

                    b.Property<int?>("CookieId");

                    b.Property<int>("Rating");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CookieId");

                    b.HasIndex("UserId");

                    b.ToTable("CookieRating");
                });

            modelBuilder.Entity("CookieShop.Domain.Models.PurchaseHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId");

                    b.Property<DateTime>("DateProcessed");

                    b.Property<bool>("IsPurchase");

                    b.Property<int>("Shares");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("AssetTransactions");
                });

            modelBuilder.Entity("CookieShop.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateJoined");

                    b.Property<string>("Email");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CookieShop.Domain.Models.Account", b =>
                {
                    b.HasOne("CookieShop.Domain.Models.User", "AccountHolder")
                        .WithMany()
                        .HasForeignKey("AccountHolderId");
                });

            modelBuilder.Entity("CookieShop.Domain.Models.Cookie", b =>
                {
                    b.HasOne("CookieShop.Domain.Models.Account")
                        .WithMany("FavoriteCookies")
                        .HasForeignKey("AccountId");
                });

            modelBuilder.Entity("CookieShop.Domain.Models.CookieRating", b =>
                {
                    b.HasOne("CookieShop.Domain.Models.Account")
                        .WithMany("Ratings")
                        .HasForeignKey("AccountId");

                    b.HasOne("CookieShop.Domain.Models.Cookie", "Cookie")
                        .WithMany()
                        .HasForeignKey("CookieId");

                    b.HasOne("CookieShop.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CookieShop.Domain.Models.PurchaseHistory", b =>
                {
                    b.HasOne("CookieShop.Domain.Models.Account", "Account")
                        .WithMany("PurchaseHistory")
                        .HasForeignKey("AccountId");

                    b.OwnsOne("CookieShop.Domain.Models.Stock", "Stock", b1 =>
                        {
                            b1.Property<int>("PurchaseHistoryId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<double>("PricePerShare");

                            b1.Property<string>("Symbol");

                            b1.HasKey("PurchaseHistoryId");

                            b1.ToTable("AssetTransactions");

                            b1.HasOne("CookieShop.Domain.Models.PurchaseHistory")
                                .WithOne("Stock")
                                .HasForeignKey("CookieShop.Domain.Models.Stock", "PurchaseHistoryId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
